package com.koreait.pjt.db;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.koreait.pjt.vo.BoardVO;

public class BoardDAO {
	public static List<BoardDomain> selBoardList(BoardDomain param){
		final List<BoardDomain> list = new ArrayList(); //객체의 주소값을 변경할 수 없다. 값을 추가 할 수는 있다.
		
		/*String sql =  " SELECT A.* FROM ( "
				 + " SELECT ROWNUM as RNUM, A.* FROM ( "
				 + " SELECT A.i_board, A.title, A.hits, A.i_user, A.r_dt, B.user_nm, B.profile_img "
				 + " FROM t_board4 A INNER JOIN t_user B ON A.i_user = B.i_user "
				 + " WHERE A.title LIKE ? "
				 + " ORDER BY i_board DESC "
				 + " ) A WHERE ROWNUM <= ? "
				 + " ) A WHERE A.RNUM > ? ";*/
		String sql = " SELECT a.* FROM "
				   + "( SELECT ROWNUM AS rnum, a.* FROM "
				   + "( SELECT a.i_board, "
				   + " a.title, a.hits, a.i_user, a.r_dt, "
				   + " b.user_nm, b.profile_img, "
				   + " c.like_cnt, c.count_cmt, c.you_like FROM t_board4 a "
				   + " INNER JOIN t_user b ON a.i_user = b.i_user "
				   + " left join "
				   + " ( SELECT a.i_board,  a.title, nvl(b.cnt, 0) AS like_cnt,  nvl(c.cmt_select, 0) AS count_cmt, decode(d.i_board, NULL, 0, 1) AS you_like FROM t_board4 a "
				   + " LEFT JOIN "
				   + " ( SELECT i_board, COUNT(i_board) AS cnt FROM t_board4_like  GROUP BY  i_board )b ON a.i_board = b.i_board "
				   + " LEFT JOIN "
				   + " ( SELECT i_board, COUNT(i_board) AS cmt_select FROM t_board_cmt "
				   + " GROUP BY i_board ) c ON a.i_board = c.i_board "
				   + " LEFT JOIN "
				   + " ( SELECT i_board  FROM t_board4_like "
				   + " WHERE i_user = ? ) d ON a.i_board = d.i_board)C on a.i_board = C.i_board "
				   + " WHERE ";
					switch(param.getSearchType()) {
					case "a" : 
						sql += "a.title like ? ";
						break;
					case "b" : 
						sql += "a.ctnt like ? ";
						break;
					case "c" : 
						sql += "( a.ctnt like ? or a.title like ? ) ";
						break;
					}
				   sql += " ORDER BY i_board DESC "
				   		+ " ) a WHERE rownum <= ? "
				   		+ ") a WHERE a.rnum > ? ";
			        
		int result = JdbcTemplate.executeQuery(sql, new JdbcSelectInterface() {
		

			@Override
			public void prepared(PreparedStatement ps) throws SQLException {
				int seq = 1;
				ps.setInt(seq, param.getI_user()); //로그인 한 사람의 i_user
				ps.setNString(++seq, param.getSearchText());//2
				
				if(param.getSearchType().equals("c")) {
					ps.setNString(++seq, param.getSearchText()); //3
				}
				ps.setInt(++seq, param.geteIdx()); //~까지 4
				ps.setInt(++seq, param.getsIdx()); //~부터 5
			}
			
			
			@Override
			public int executeQuery(ResultSet rs) throws SQLException {
				
				while(rs.next()) {
					int i_board = rs.getInt("i_board");
					String title = rs.getNString("title");
					int hits = rs.getInt("hits");
					int i_user = rs.getInt("i_user");
					String r_dt = rs.getNString("r_dt");
					String profile_img = rs.getNString("profile_img");
					String user_nm = rs.getNString("user_nm");
					int like_cnt = rs.getInt("like_cnt");
					int count_cmt = rs.getInt("count_cmt");
					int you_like = rs.getInt("you_like");
					
					
					
					BoardDomain vo = new BoardDomain();
					vo.setI_board(i_board);
					vo.setTitle(title);
					vo.setHits(hits);
					vo.setI_user(i_user);
					vo.setR_dt(r_dt);
					vo.setUser_nm(user_nm);
					vo.setProfile_img(profile_img);
					vo.setLike_cnt(like_cnt);
					vo.setCount_cmt(count_cmt);
					vo.setYou_like(you_like);
					
					list.add(vo);
				}			
					return 1;
			}			
			
		});
			return list;
	}
	
	public static int insBoard(BoardVO param) {
		
		String sql = "insert into t_board4(i_board, title, ctnt, i_user)" +
				  "select nvl(max(i_board),0) + 1, ?, ?, ?" + "from t_board4";
		
		return JdbcTemplate.excuteUpdate(sql, new JdbcUpdateInterface() {

			@Override
			public void update(PreparedStatement ps) throws SQLException { //sql로 ps를 만들어서  ps를받음
				ps.setNString(1, param.getTitle());
				ps.setNString(2, param.getCtnt());
				ps.setInt(3, param.getI_user());
			}	
			
		});
		
	}
	public static BoardDomain detailBoard(BoardVO param) {
			BoardDomain result = new BoardDomain();
			result.setI_board(param.getI_board());
		/*String sql = " SELECT A.i_board, A.title, A.ctnt, B.user_nm, A.i_user, A.r_dt, A.hits "
				+ " FROM t_board4 A "
				+ " inner join t_user B "
				+ " on A.i_user = B.i_user "
				+ " WHERE A.i_board = ? ";*/
		
		String sql = " select A.*, B.user_nm, B.profile_img, decode(C.i_user, null, 0, 1) as like_ "
				+ ", (SELECT count(*) FROM t_board4_like where i_board = ?) as like_cnt "
				+ " from t_board4 A "
				+ " inner join t_user B "
				+ " on A.i_user = B.i_user "
				+ " left join t_board4_like C "
				+ " on A.i_board = C.i_board and c.i_user = ? where A.i_board = ? ";
		//i_user : 로그인 한 사람, i_board : 선택된 게시글
		//like가 예약어라서 실행안됨, 검색어 like가 작동함
		
		int resultInt = JdbcTemplate.executeQuery(sql, new JdbcSelectInterface() {

			@Override
			public void prepared(PreparedStatement ps) throws SQLException {
				ps.setInt(1, param.getI_board());
				ps.setInt(2, param.getI_user());
				ps.setInt(3, param.getI_board());
				
			}

			@Override
			public int executeQuery(ResultSet rs) throws SQLException {
				if(rs.next()) {
			
					result.setI_user(rs.getInt("i_board"));
					result.setTitle(rs.getNString("title"));
					result.setCtnt(rs.getNString("ctnt"));
					result.setUser_nm(rs.getNString("user_nm"));
					result.setR_dt(rs.getNString("r_dt"));
					result.setHits(rs.getInt("hits"));
					result.setI_user(rs.getInt("i_user")); //작성자
					result.setLike(rs.getInt("like_"));
					result.setLike_cnt(rs.getInt("like_cnt"));
					result.setProfile_img(rs.getNString("profile_img"));
					
					} 
				return 1;				
				}
		});
		return result;
	}
	
		public static int delBoard(BoardVO param) {
			
			String sql = " delete from t_board4 where i_board = ? ";
		
			return JdbcTemplate.excuteUpdate(sql, new JdbcUpdateInterface() {
				@Override
				public void update(PreparedStatement ps) throws SQLException {				
				ps.setInt(1, param.getI_board());
			}
		});
		
	}
		
	
		public static int upBoard(BoardVO param) {
		
		String sql = "update t_board4 set title=?, ctnt=? where i_board=?";
		return JdbcTemplate.excuteUpdate(sql, new JdbcUpdateInterface() {

			@Override
			public void update(PreparedStatement ps) throws SQLException {
				
				ps.setNString(1, param.getTitle());
				ps.setNString(2, param.getCtnt());
				ps.setInt(3, param.getI_board());
				
			}
			
			
		});
		
		
		
	}
		
		public static int addHits(BoardVO param) {
			
			String sql = "update t_board4 set hits=? where i_board=?";
			return JdbcTemplate.excuteUpdate(sql, new JdbcUpdateInterface() {

				@Override
				public void update(PreparedStatement ps) throws SQLException {					
					int addhits = param.getHits() + 1;
					ps.setInt(1, addhits);
					ps.setInt(2, param.getI_board());
					param.setHits(addhits);
				}
				
				
			});  
		}
		
		public static int like(BoardVO param) {
			
			String sql = " insert into t_board4_like (i_board, i_user) values (?, ?) ";
			
			return JdbcTemplate.excuteUpdate(sql, new JdbcUpdateInterface() {

				@Override
				public void update(PreparedStatement ps) throws SQLException { 
					ps.setInt(1, param.getI_board());
					ps.setInt(2, param.getI_user());

				}	
				
			});
			
		}
		
		public static int unlike(BoardVO param) {
			
			String sql = " delete t_board4_like where i_board=? and i_user=? ";
			
			return JdbcTemplate.excuteUpdate(sql, new JdbcUpdateInterface() {

				@Override
				public void update(PreparedStatement ps) throws SQLException { 
					ps.setInt(1, param.getI_board());
					ps.setInt(2, param.getI_user());
					
				}	
				
			});
			
			
		}
		
		//페이지 숫자 가져오기
		public static int selPagingCnt(final BoardDomain param) {
			String sql = " select ceil(count(i_board) / ?) from t_board4 where "; //'%' || ? || '%'
			
			switch(param.getSearchType()) {
			case "a" : 
				sql += " title like ? ";
				break;
			case "b" : 
				sql += " ctnt like ? ";
				break;
			case "c" : 
				sql += "( ctnt like ? or title like ? ) ";
				break;
			}
			
			return JdbcTemplate.executeQuery(sql, new JdbcSelectInterface() {

				@Override
				public void prepared(PreparedStatement ps) throws SQLException {
					ps.setInt(1, param.getRecord_cnt());
					ps.setNString(2, param.getSearchText());
					
					if(param.getSearchType().equals("c")) {
						ps.setNString(3, param.getSearchText());
					}
					
				}

				@Override
				public int executeQuery(ResultSet rs) throws SQLException {
					if(rs.next()) {
						return rs.getInt(1); //첫번째 열값을 인덱스로 가져와서 리턴
					}
					return 0;
				}
				
			});
			
		}
		
		
			
}


	


